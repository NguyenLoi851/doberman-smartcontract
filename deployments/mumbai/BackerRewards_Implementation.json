{
  "address": "0x54e7d9E17ea03E3909ebF13Be2Baf55F779eb71F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxInterestDollarsEligible",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsSetMaxInterestDollarsEligible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInterestReceived",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsSetTotalInterestReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewardPercentOfTotalGFI",
          "type": "uint256"
        }
      ],
      "name": "BackerRewardsSetTotalRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "configAddress",
          "type": "address"
        }
      ],
      "name": "DobermanConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract DobermanConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "__initialize__",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interestPaymentAmount",
          "type": "uint256"
        }
      ],
      "name": "allocateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract DobermanConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxInterestDollarsEligible",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "poolTokenClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accRewardsPerPrincipalDollar",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxInterestDollarsEligible",
          "type": "uint256"
        }
      ],
      "name": "setMaxInterestDollarsEligible",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setPoolTokenAccRewardsPerPrincipalDollarAtMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalInterestReceived",
          "type": "uint256"
        }
      ],
      "name": "setTotalInterestReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalRewards",
          "type": "uint256"
        }
      ],
      "name": "setTotalRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardsClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardsPerPrincipalDollarAtMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPercentOfTotalGFI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDobermanConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x293081a06def643a3668db45fc3a282a7ffb7e1dcc87e98cdaebb0fdaea47946",
  "receipt": {
    "to": null,
    "from": "0x9460b481366b7462af4f7991d430e5eB97FAAEB5",
    "contractAddress": "0x54e7d9E17ea03E3909ebF13Be2Baf55F779eb71F",
    "transactionIndex": 17,
    "gasUsed": "2349217",
    "logsBloom": "0x
    "blockHash": "0x9fae42a399b45dc37261770717138283a720bbf4ec9aa6ede586ec01c85a5b89",
    "transactionHash": "0x293081a06def643a3668db45fc3a282a7ffb7e1dcc87e98cdaebb0fdaea47946",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 36266823,
        "transactionHash": "0x293081a06def643a3668db45fc3a282a7ffb7e1dcc87e98cdaebb0fdaea47946",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009460b481366b7462af4f7991d430e5eb97faaeb5",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000085899b4c90a00000000000000000000000000000000000000000000000000676c0b3589144a86000000000000000000000000000000000000000000001fae448596608797fe3e0000000000000000000000000000000000000000000000006763b29bd44b4086000000000000000000000000000000000000000000001fae448deefa3c61083e",
        "logIndex": 64,
        "blockHash": "0x9fae42a399b45dc37261770717138283a720bbf4ec9aa6ede586ec01c85a5b89"
      }
    ],
    "blockNumber": 36266823,
    "cumulativeGasUsed": "4540216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ae210064203e836f7b382a4941e267e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxInterestDollarsEligible\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsSetMaxInterestDollarsEligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInterestReceived\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsSetTotalInterestReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardPercentOfTotalGFI\",\"type\":\"uint256\"}],\"name\":\"BackerRewardsSetTotalRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"configAddress\",\"type\":\"address\"}],\"name\":\"DobermanConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract DobermanConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"__initialize__\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestPaymentAmount\",\"type\":\"uint256\"}],\"name\":\"allocateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract DobermanConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInterestDollarsEligible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"poolTokenClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardsPerPrincipalDollar\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxInterestDollarsEligible\",\"type\":\"uint256\"}],\"name\":\"setMaxInterestDollarsEligible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setPoolTokenAccRewardsPerPrincipalDollarAtMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInterestReceived\",\"type\":\"uint256\"}],\"name\":\"setTotalInterestReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"name\":\"setTotalRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerPrincipalDollarAtMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPercentOfTotalGFI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDobermanConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allocateRewards(uint256)\":{\"params\":{\"_interestPaymentAmount\":\"The amount of total dollars the interest payment, expects 10^6 value\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"poolTokenClaimableRewards(uint256)\":{\"params\":{\"tokenId\":\"Pool token id\"},\"returns\":{\"_0\":\"The amount of GFI claimable\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setMaxInterestDollarsEligible(uint256)\":{\"params\":{\"_maxInterestDollarsEligible\":\"The amount of interest dollars eligible for GFI rewards, expects 10^18 value\"}},\"setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)\":{\"params\":{\"tokenId\":\"Pool token id\"}},\"setTotalInterestReceived(uint256)\":{\"params\":{\"_totalInterestReceived\":\"The amount of interest the protocol has received to date, expects 10^6 value\"}},\"setTotalRewards(uint256)\":{\"params\":{\"_totalRewards\":\"The amount of GFI rewards available, expects 10^18 value\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256)\":{\"params\":{\"tokenId\":\"Pool token id\"}},\"withdrawMultiple(uint256[])\":{\"params\":{\"tokenIds\":\"Array of pool token id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocateRewards(uint256)\":{\"notice\":\"Calculates the accRewardsPerPrincipalDollar for a given pool, when a interest payment is received by the protocol\"},\"poolTokenClaimableRewards(uint256)\":{\"notice\":\"Calculate the gross available gfi rewards for a PoolToken\"},\"setMaxInterestDollarsEligible(uint256)\":{\"notice\":\"Set the max dollars across the entire protocol that are eligible for GFI rewards\"},\"setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)\":{\"notice\":\"When a pool token is minted for multiple drawdowns, set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price\"},\"setTotalInterestReceived(uint256)\":{\"notice\":\"Set the total interest received to date. This should only be called once on contract deploy.\"},\"setTotalRewards(uint256)\":{\"notice\":\"Set the total gfi rewards and the % of total GFI\"},\"withdraw(uint256)\":{\"notice\":\"PoolToken request to withdraw all allocated rewards\"},\"withdrawMultiple(uint256[])\":{\"notice\":\"PoolToken request to withdraw multiple PoolTokens allocated rewards\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/BackerRewards.sol\":\"BackerRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IBackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBackerRewards {\\n  function allocateRewards(uint256 _interestPaymentAmount) external;\\n\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x5c066b925ddbf4c8d7a9c7feb705100a8521bb638e53235823af8f3850656356\",\"license\":\"MIT\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc63bc7eaaf9c8bfb71c50236442da8d773a20144f3fb72435509c153603a937\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc7da9ab87b0ff9c7f4c9d6071c2e86bdd581c820227ec7203e3bf7e494f2de5a\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf2086c373a79a01688d42eb3b5ed1a2233c6a9226a75bf86ddbb8f6f5276bffa\",\"license\":\"MIT\"},\"contracts/interfaces/IDobermanConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IDobermanConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external returns (address);\\n\\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xec175f23b1ca4f0a5eeeb64dd4d5c59645fecfe25a2d2925a94be14441709df2\",\"license\":\"MIT\"},\"contracts/interfaces/IDobermanFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IDobermanFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function updateDobermanConfig() external;\\n}\\n\",\"keccak256\":\"0x994ea7c5e879dcc6d286fba969968ec6db33602374c8453491825ba48284860e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xad7ebf33181ca25632a0a6d0d4273c43095b5337ed257b08f605204c59a906cf\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xcd54e89fe744c15d259508643db75c1f87c31c6fc39100099065fe9e66138b50\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(address account, uint256[] calldata onlyIdTypes) public view virtual returns (bool);\\n\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n\\n  function updateDobermanConfig() external virtual;\\n}\\n\",\"keccak256\":\"0x8fac87246f8cd02b19a3b8149168a20f713c1eb7f83a73df93b4268bf887cfa3\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 usdcAmount) external virtual;\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function drawdown(address to, uint256 amount) public virtual returns (bool);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a28110740734539b0a3b6452a372e91bd1b848134b6088e7016b901707c28b4\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IPoolTokens is IERC721Upgradeable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe5726725621e6306b3f79602d807a5738d63ad64a77e1db86e201a75427e8ec3\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xef412d63f82bb66aa382db5a4ea33b2d50c0d29002bab8536c968ac35c244d86\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function getLeverageRatio(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\\n\\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x11c48e73b3813a76f52ecc149fcfb7ae03dbcad245557fba57da2e46edf8e95a\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\",\"keccak256\":\"0xbd8d1ee91296df9b944a31d94023937d6dd2893c9fd73e283767653d2b813be5\",\"license\":\"MIT\"},\"contracts/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateDobermanConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xe16a99039e2b5f2472a7c520d53bca63fbd412c4169201f552e5e13a6d120af8\",\"license\":\"MIT\"},\"contracts/library/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xcbacd507d6e9a4e6d4686561137c6de239170966467a9c83669814d0ad4441aa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/library/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Safe ERC20 Transfer\\n * @notice Reverts when transfer is not successful\\n * @author Doberman\\n */\\nabstract contract SafeERC20Transfer {\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    bool success = erc20.transfer(to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    safeERC20Transfer(erc20, to, amount, \\\"Failed to transfer ERC20\\\");\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    bool success = erc20.transferFrom(from, to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    string memory message = \\\"Failed to transfer ERC20\\\";\\n    safeERC20TransferFrom(erc20, from, to, amount, message);\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance,\\n    string memory message\\n  ) internal {\\n    bool success = erc20.approve(spender, allowance);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance\\n  ) internal {\\n    string memory message = \\\"Failed to approve ERC20\\\";\\n    safeERC20Approve(erc20, spender, allowance, message);\\n  }\\n}\\n\",\"keccak256\":\"0x49ea6db8646915e906262035806060e3c98bd85c3cea07a53872f750b18bbb88\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like ugpradeability, pausability, access control, and re-entrancy guards.\\n * @author Doberman\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeable,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeable\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x6a663caed18f43ee21429662f8ed0adea907b71363bd03d94dbf13708ccf652c\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./DobermanConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport \\\"../../interfaces/IDobermanFactory.sol\\\";\\nimport \\\"../../interfaces/IGo.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the DobermanConfig contract\\n * @author Doberman\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(DobermanConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getSeniorPool(DobermanConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(DobermanConfig config) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(DobermanConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(DobermanConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(DobermanConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getCUSDCContract(DobermanConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(DobermanConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getBackerRewards(DobermanConfig config) internal view returns (IBackerRewards) {\\n    return IBackerRewards(backerRewardsAddress(config));\\n  }\\n\\n  function getDobermanFactory(DobermanConfig config) internal view returns (IDobermanFactory) {\\n    return IDobermanFactory(DobermanFactoryAddress(config));\\n  }\\n\\n  function getGFI(DobermanConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(gfiAddress(config));\\n  }\\n\\n  function getGo(DobermanConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function oneInchAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  function trustedForwarderAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.DobermanConfig));\\n  }\\n\\n  function poolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function poolTokensAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function backerRewardsAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\\n  }\\n\\n  function seniorPoolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function creditDeskAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function DobermanFactoryAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.DobermanFactory));\\n  }\\n\\n  function gfiAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function fiduAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function cusdcContractAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function migratedTranchedPoolAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MigratedTranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(DobermanConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(DobermanConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n}\\n\",\"keccak256\":\"0x65b5c7e41651a3951d54da6ef2edf347211c23bab013924a791e018d39315e5c\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our DobermanConfig contract\\n * @author Doberman\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    DobermanFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder,\\n    CUSDCContract,\\n    DobermanConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation,\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards\\n  }\\n}\\n\",\"keccak256\":\"0x5eed9c04b4012fb99977aa1aa18a6638b4ce03b2de6c61eaff93482a16ee437f\",\"license\":\"MIT\"},\"contracts/protocol/core/DobermanConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IDobermanConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title DobermanConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Doberman\\n */\\n\\ncontract DobermanConfig is BaseUpgradeablePausable {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setTranchedPoolImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TranchedPoolImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setDobermanConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.DobermanConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(\\n    address _initialConfig,\\n    uint256 numbersLength,\\n    uint256 addressesLength\\n  ) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IDobermanConfig initialConfig = IDobermanConfig(_initialConfig);\\n    for (uint256 i = 0; i < numbersLength; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < addressesLength; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) public view returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(hasRole(GO_LISTER_ROLE, _msgSender()), \\\"Must have go-lister role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xaf30cff9542a8440ca1516cc211331438741ab31bc9fae6557e889a8da80a09d\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Doberman\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeable, PausableUpgradeable {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x90b1a2f234a85604daef7d5d8163bda1d3bc7002c14a3957f717796f12255f09\",\"license\":\"MIT\"},\"contracts/rewards/BackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../library/Babylonian.sol\\\";\\n\\nimport \\\"../library/SafeERC20Transfer.sol\\\";\\nimport \\\"../protocol/core/ConfigHelper.sol\\\";\\nimport \\\"../protocol/core/BaseUpgradeablePausable.sol\\\";\\nimport \\\"../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../interfaces/ITranchedPool.sol\\\";\\nimport \\\"../interfaces/IBackerRewards.sol\\\";\\n\\n// Basically, Every time a interest payment comes back\\n// we keep a running total of dollars (totalInterestReceived) until it reaches the maxInterestDollarsEligible limit\\n// Every dollar of interest received from 0->maxInterestDollarsEligible\\n// has a allocated amount of rewards based on a sqrt function.\\n\\n// When a interest payment comes in for a given Pool or the pool balance increases\\n// we recalculate the pool's accRewardsPerPrincipalDollar\\n\\n// equation ref `_calculateNewGrossGFIRewardsForInterestAmount()`:\\n// (sqrtNewTotalInterest - sqrtOrigTotalInterest) / sqrtMaxInterestDollarsEligible * (totalRewards / totalGFISupply)\\n\\n// When a PoolToken is minted, we set the mint price to the pool's current accRewardsPerPrincipalDollar\\n// Every time a PoolToken withdraws rewards, we determine the allocated rewards,\\n// increase that PoolToken's rewardsClaimed, and transfer the owner the gfi\\n\\ncontract BackerRewards is IBackerRewards, BaseUpgradeablePausable, SafeERC20Transfer {\\n  DobermanConfig public config;\\n  using ConfigHelper for DobermanConfig;\\n  using SafeMath for uint256;\\n\\n  struct BackerRewardsInfo {\\n    uint256 accRewardsPerPrincipalDollar; // accumulator gfi per interest dollar\\n  }\\n\\n  struct BackerRewardsTokenInfo {\\n    uint256 rewardsClaimed; // gfi claimed\\n    uint256 accRewardsPerPrincipalDollarAtMint; // Pool's accRewardsPerPrincipalDollar at PoolToken mint()\\n  }\\n\\n  uint256 public totalRewards; // total amount of GFI rewards available, times 1e18\\n  uint256 public maxInterestDollarsEligible; // interest $ eligible for gfi rewards, times 1e18\\n  uint256 public totalInterestReceived; // counter of total interest repayments, times 1e6\\n  uint256 public totalRewardPercentOfTotalGFI; // totalRewards/totalGFISupply, times 1e18\\n\\n  mapping(uint256 => BackerRewardsTokenInfo) public tokens; // poolTokenId -> BackerRewardsTokenInfo\\n\\n  mapping(address => BackerRewardsInfo) public pools; // pool.address -> BackerRewardsInfo\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __initialize__(address owner, DobermanConfig _config) public initializer {\\n    require(owner != address(0) && address(_config) != address(0), \\\"Owner and config addresses cannot be empty\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n  }\\n\\n  /**\\n   * @notice Calculates the accRewardsPerPrincipalDollar for a given pool,\\n   when a interest payment is received by the protocol\\n   * @param _interestPaymentAmount The amount of total dollars the interest payment, expects 10^6 value\\n   */\\n  function allocateRewards(uint256 _interestPaymentAmount) external override onlyPool {\\n    // note: do not use a require statment because that will TranchedPool kill execution\\n    if (_interestPaymentAmount > 0) {\\n      _allocateRewards(_interestPaymentAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set the total gfi rewards and the % of total GFI\\n   * @param _totalRewards The amount of GFI rewards available, expects 10^18 value\\n   */\\n  function setTotalRewards(uint256 _totalRewards) public onlyAdmin {\\n    totalRewards = _totalRewards;\\n    uint256 totalGFISupply = config.getGFI().totalSupply();\\n    totalRewardPercentOfTotalGFI = _totalRewards.mul(mantissa()).div(totalGFISupply).mul(100);\\n    emit BackerRewardsSetTotalRewards(_msgSender(), _totalRewards, totalRewardPercentOfTotalGFI);\\n  }\\n\\n  /**\\n   * @notice Set the total interest received to date.\\n   This should only be called once on contract deploy.\\n   * @param _totalInterestReceived The amount of interest the protocol has received to date, expects 10^6 value\\n   */\\n  function setTotalInterestReceived(uint256 _totalInterestReceived) public onlyAdmin {\\n    totalInterestReceived = _totalInterestReceived;\\n    emit BackerRewardsSetTotalInterestReceived(_msgSender(), _totalInterestReceived);\\n  }\\n\\n  /**\\n   * @notice Set the max dollars across the entire protocol that are eligible for GFI rewards\\n   * @param _maxInterestDollarsEligible The amount of interest dollars eligible for GFI rewards, expects 10^18 value\\n   */\\n  function setMaxInterestDollarsEligible(uint256 _maxInterestDollarsEligible) public onlyAdmin {\\n    maxInterestDollarsEligible = _maxInterestDollarsEligible;\\n    emit BackerRewardsSetMaxInterestDollarsEligible(_msgSender(), _maxInterestDollarsEligible);\\n  }\\n\\n  /**\\n   * @notice When a pool token is minted for multiple drawdowns,\\n   set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price\\n   * @param tokenId Pool token id\\n   */\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external override {\\n    require(_msgSender() == config.poolTokensAddress(), \\\"Invalid sender!\\\");\\n    require(config.getPoolTokens().validPool(poolAddress), \\\"Invalid pool!\\\");\\n    if (tokens[tokenId].accRewardsPerPrincipalDollarAtMint != 0) {\\n      return;\\n    }\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(tokenId);\\n    require(poolAddress == tokenInfo.pool, \\\"PoolAddress must equal PoolToken pool address\\\");\\n\\n    tokens[tokenId].accRewardsPerPrincipalDollarAtMint = pools[tokenInfo.pool].accRewardsPerPrincipalDollar;\\n  }\\n\\n  /**\\n   * @notice Calculate the gross available gfi rewards for a PoolToken\\n   * @param tokenId Pool token id\\n   * @return The amount of GFI claimable\\n   */\\n  function poolTokenClaimableRewards(uint256 tokenId) public view returns (uint256) {\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(tokenId);\\n\\n    // Note: If a TranchedPool is oversubscribed, reward allocation's scale down proportionately.\\n\\n    uint256 diffOfAccRewardsPerPrincipalDollar = pools[tokenInfo.pool].accRewardsPerPrincipalDollar.sub(\\n      tokens[tokenId].accRewardsPerPrincipalDollarAtMint\\n    );\\n    uint256 rewardsClaimed = tokens[tokenId].rewardsClaimed.mul(mantissa());\\n\\n    /*\\n      equation for token claimable rewards:\\n        token.principalAmount\\n        * (pool.accRewardsPerPrincipalDollar - token.accRewardsPerPrincipalDollarAtMint)\\n        - token.rewardsClaimed\\n    */\\n\\n    return\\n      usdcToAtomic(tokenInfo.principalAmount).mul(diffOfAccRewardsPerPrincipalDollar).sub(rewardsClaimed).div(\\n        mantissa()\\n      );\\n  }\\n\\n  /**\\n   * @notice PoolToken request to withdraw multiple PoolTokens allocated rewards\\n   * @param tokenIds Array of pool token id\\n   */\\n  function withdrawMultiple(uint256[] calldata tokenIds) public {\\n    require(tokenIds.length > 0, \\\"TokensIds length must not be 0\\\");\\n\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      withdraw(tokenIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice PoolToken request to withdraw all allocated rewards\\n   * @param tokenId Pool token id\\n   */\\n  function withdraw(uint256 tokenId) public {\\n    uint256 totalClaimableRewards = poolTokenClaimableRewards(tokenId);\\n    uint256 poolTokenRewardsClaimed = tokens[tokenId].rewardsClaimed;\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(tokenId);\\n\\n    address poolAddr = tokenInfo.pool;\\n    require(config.getPoolTokens().validPool(poolAddr), \\\"Invalid pool!\\\");\\n    require(msg.sender == poolTokens.ownerOf(tokenId), \\\"Must be owner of PoolToken\\\");\\n\\n    BaseUpgradeablePausable pool = BaseUpgradeablePausable(poolAddr);\\n    require(!pool.paused(), \\\"Pool withdraw paused\\\");\\n\\n    ITranchedPool tranchedPool = ITranchedPool(poolAddr);\\n    require(!tranchedPool.creditLine().isLate(), \\\"Pool is late on payments\\\");\\n\\n    tokens[tokenId].rewardsClaimed = poolTokenRewardsClaimed.add(totalClaimableRewards);\\n    safeERC20Transfer(config.getGFI(), poolTokens.ownerOf(tokenId), totalClaimableRewards);\\n    emit BackerRewardsClaimed(_msgSender(), tokenId, totalClaimableRewards);\\n  }\\n\\n  /* Internal functions  */\\n  function _allocateRewards(uint256 _interestPaymentAmount) internal {\\n    uint256 _totalInterestReceived = totalInterestReceived;\\n    if (usdcToAtomic(_totalInterestReceived) >= maxInterestDollarsEligible) {\\n      return;\\n    }\\n\\n    address _poolAddress = _msgSender();\\n\\n    // Gross GFI Rewards earned for incoming interest dollars\\n    uint256 newGrossRewards = _calculateNewGrossGFIRewardsForInterestAmount(_interestPaymentAmount);\\n\\n    ITranchedPool pool = ITranchedPool(_poolAddress);\\n    BackerRewardsInfo storage _poolInfo = pools[_poolAddress];\\n\\n    uint256 totalJuniorDeposits = pool.totalJuniorDeposits();\\n    if (totalJuniorDeposits == 0) {\\n      return;\\n    }\\n\\n    // example: (6708203932437400000000 * 10^18) / (100000*10^18)\\n    _poolInfo.accRewardsPerPrincipalDollar = _poolInfo.accRewardsPerPrincipalDollar.add(\\n      newGrossRewards.mul(mantissa()).div(usdcToAtomic(totalJuniorDeposits))\\n    );\\n\\n    totalInterestReceived = _totalInterestReceived.add(_interestPaymentAmount);\\n  }\\n\\n  /**\\n   * @notice Calculate the rewards earned for a given interest payment\\n   * @param _interestPaymentAmount interest payment amount times 1e6\\n   */\\n  function _calculateNewGrossGFIRewardsForInterestAmount(uint256 _interestPaymentAmount)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 totalGFISupply = config.getGFI().totalSupply();\\n\\n    // incoming interest payment, times * 1e18 divided by 1e6\\n    uint256 interestPaymentAmount = usdcToAtomic(_interestPaymentAmount);\\n\\n    // all-time interest payments prior to the incoming amount, times 1e18\\n    uint256 _previousTotalInterestReceived = usdcToAtomic(totalInterestReceived);\\n    uint256 sqrtOrigTotalInterest = Babylonian.sqrt(_previousTotalInterestReceived);\\n\\n    // sum of new interest payment + previous total interest payments, times 1e18\\n    uint256 newTotalInterest = usdcToAtomic(\\n      atomicToUSDC(_previousTotalInterestReceived).add(atomicToUSDC(interestPaymentAmount))\\n    );\\n\\n    // interest payment passed the maxInterestDollarsEligible cap, should only partially be rewarded\\n    if (newTotalInterest > maxInterestDollarsEligible) {\\n      newTotalInterest = maxInterestDollarsEligible;\\n    }\\n\\n    /*\\n      equation:\\n        (sqrtNewTotalInterest-sqrtOrigTotalInterest)\\n        * totalRewardPercentOfTotalGFI\\n        / sqrtMaxInterestDollarsEligible\\n        / 100\\n        * totalGFISupply\\n        / 10^18\\n\\n      example scenario:\\n      - new payment = 5000*10^18\\n      - original interest received = 0*10^18\\n      - total reward percent = 3 * 10^18\\n      - max interest dollars = 1 * 10^27 ($1 billion)\\n      - totalGfiSupply = 100_000_000 * 10^18\\n\\n      example math:\\n        (70710678118 - 0)\\n        * 3000000000000000000\\n        / 31622776601683\\n        / 100\\n        * 100000000000000000000000000\\n        / 10^18\\n        = 6708203932437400000000 (6,708.2039 GFI)\\n    */\\n    uint256 sqrtDiff = Babylonian.sqrt(newTotalInterest).sub(sqrtOrigTotalInterest);\\n    uint256 sqrtMaxInterestDollarsEligible = Babylonian.sqrt(maxInterestDollarsEligible);\\n\\n    require(sqrtMaxInterestDollarsEligible > 0, \\\"maxInterestDollarsEligible must not be zero\\\");\\n\\n    uint256 newGrossRewards = sqrtDiff\\n      .mul(totalRewardPercentOfTotalGFI)\\n      .div(sqrtMaxInterestDollarsEligible)\\n      .div(100)\\n      .mul(totalGFISupply)\\n      .div(mantissa());\\n\\n    // Extra safety check to make sure the logic is capped at a ceiling of potential rewards\\n    // Calculating the gfi/$ for first dollar of interest to the protocol, and multiplying by new interest amount\\n    uint256 absoluteMaxGfiCheckPerDollar = Babylonian\\n      .sqrt((uint256)(1).mul(mantissa()))\\n      .mul(totalRewardPercentOfTotalGFI)\\n      .div(sqrtMaxInterestDollarsEligible)\\n      .div(100)\\n      .mul(totalGFISupply)\\n      .div(mantissa());\\n    require(\\n      newGrossRewards < absoluteMaxGfiCheckPerDollar.mul(newTotalInterest),\\n      \\\"newGrossRewards cannot be greater then the max gfi per dollar\\\"\\n    );\\n\\n    return newGrossRewards;\\n  }\\n\\n  function mantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  function usdcMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(6);\\n  }\\n\\n  function usdcToAtomic(uint256 amount) internal pure returns (uint256) {\\n    return amount.mul(mantissa()).div(usdcMantissa());\\n  }\\n\\n  function atomicToUSDC(uint256 amount) internal pure returns (uint256) {\\n    return amount.div(mantissa().div(usdcMantissa()));\\n  }\\n\\n  function updateDobermanConfig() external onlyAdmin {\\n    config = DobermanConfig(config.configAddress());\\n    emit DobermanConfigUpdated(_msgSender(), address(config));\\n  }\\n\\n  /* ======== MODIFIERS  ======== */\\n\\n  modifier onlyPool() {\\n    require(config.getPoolTokens().validPool(_msgSender()), \\\"Invalid pool!\\\");\\n    _;\\n  }\\n\\n  /* ======== EVENTS ======== */\\n  event DobermanConfigUpdated(address indexed who, address configAddress);\\n  event BackerRewardsClaimed(address indexed owner, uint256 indexed tokenId, uint256 amount);\\n  event BackerRewardsSetTotalRewards(address indexed owner, uint256 totalRewards, uint256 totalRewardPercentOfTotalGFI);\\n  event BackerRewardsSetTotalInterestReceived(address indexed owner, uint256 totalInterestReceived);\\n  event BackerRewardsSetMaxInterestDollarsEligible(address indexed owner, uint256 maxInterestDollarsEligible);\\n}\\n\",\"keccak256\":\"0xe7b13662abd42ea69ae83ed88faf4fe6b606030b2b8e1e28cfb926e162185171\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612988806100206000396000f3fe608060405234801561001057600080fd5b50600436106101b05760003560e01c80636efbe643116100ef578063b6db75a011610092578063b6db75a0146103a9578063b6f8fd40146103b1578063ccf5a971146103c4578063d30a0911146103ce578063d547741f146103d6578063e58378bb146103e9578063e5b79106146103fe578063e63ab1e91461041157600080fd5b80636efbe6431461031457806379502c55146103275780638456cb591461034857806387f5769e1461035057806391d148541461035a578063927356751461036d578063a217fddf14610380578063a4063dbc1461038857600080fd5b80632e1a7d4d116101575780632e1a7d4d146102705780632f2ff15d1461028357806336568abe14610296578063369dfa84146102a95780633f4ba83a146102bc5780634f64b2be146102c4578063526d81f6146103015780635c975abb1461030957600080fd5b806301ffc9a7146101b5578063097616a3146101dd5780630c9dbe94146101f25780630e15561a1461020a578063242a728614610214578063248a9ca3146102275780632879e4de1461024a57806328fc33c71461025d575b600080fd5b6101c86101c336600461243b565b610426565b60405190151581526020015b60405180910390f35b6101f06101eb3660046122d4565b61045d565b005b6101fc6101c75481565b6040519081526020016101d4565b6101fc6101c45481565b6101f06102223660046123ff565b6105f3565b6101fc6102353660046123ff565b60009081526065602052604090206001015490565b6101f06102583660046123ff565b610656565b6101f061026b3660046123ff565b6106b2565b6101f061027e3660046123ff565b610771565b6101f0610291366004612417565b610c8a565b6101f06102a4366004612417565b610cb4565b6101fc6102b73660046123ff565b610d2e565b6101f0610e64565b6102ec6102d23660046123ff565b6101c8602052600090815260409020805460019091015482565b604080519283526020830191909152016101d4565b6101f0610ea2565b60975460ff166101c8565b6101f0610322366004612344565b610f59565b6101c35461033b906001600160a01b031681565b6040516101d4919061256e565b6101f06111d1565b6101fc6101c65481565b6101c8610368366004612417565b61120d565b6101f061037b3660046123ff565b611238565b6101fc600081565b6101fc6103963660046122d4565b6101c96020526000908152604090205481565b6101c861134e565b6101f06103bf36600461230c565b61136d565b6101fc6101c55481565b6101f06114c2565b6101f06103e4366004612417565b611557565b6101fc6000805160206128f383398151915281565b6101f061040c36600461236f565b61157c565b6101fc60008051602061293383398151915281565b60006001600160e01b03198216637965db0b60e01b148061045757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff161580801561047d5750600054600160ff909116105b806104975750303b158015610497575060005460ff166001145b6104bc5760405162461bcd60e51b81526004016104b390612628565b60405180910390fd5b6000805460ff1916600117905580156104df576000805461ff0019166101001790555b6001600160a01b0382166105355760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f206164647265737360448201526064016104b3565b61053d611615565b61054561163c565b61054d61166f565b6105656000805160206128f38339815191528361169d565b61057d6000805160206129338339815191528361169d565b6105a36000805160206129338339815191526000805160206128f38339815191526116a7565b6105bb6000805160206128f3833981519152806116a7565b80156105ef576000805461ff0019169055604051600181526000805160206129138339815191529060200160405180910390a15b5050565b6105fb61134e565b6106175760405162461bcd60e51b81526004016104b3906126c1565b6101c581905560405181815233907fbd23f227ee01d5b74d28337b4aa192bdb10824b0f2ad21e725a2f08af91ec81b906020015b60405180910390a250565b61065e61134e565b61067a5760405162461bcd60e51b81526004016104b3906126c1565b6101c681905560405181815233907feabaa681e9990f0da888d0feb7ec727809a7e832013b120a9a248ba6b16d5f449060200161064b565b6101c3546106c8906001600160a01b03166116f2565b6001600160a01b031663b5ada6d8336040518263ffffffff1660e01b81526004016106f3919061256e565b60206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074391906123df565b61075f5760405162461bcd60e51b81526004016104b390612601565b801561076e5761076e816116fd565b50565b600061077c82610d2e565b60008381526101c860205260408120546101c354929350916107a6906001600160a01b03166116f2565b60405163463d31d760e11b8152600481018690529091506000906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190612463565b80516101c35491925090610840906001600160a01b03166116f2565b6001600160a01b031663b5ada6d8826040518263ffffffff1660e01b815260040161086b919061256e565b60206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb91906123df565b6108d75760405162461bcd60e51b81526004016104b390612601565b6040516331a9108f60e11b8152600481018790526001600160a01b03841690636352211e9060240160206040518083038186803b15801561091757600080fd5b505afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f91906122f0565b6001600160a01b0316336001600160a01b0316146109af5760405162461bcd60e51b815260206004820152601a60248201527f4d757374206265206f776e6572206f6620506f6f6c546f6b656e00000000000060448201526064016104b3565b6000819050806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ed57600080fd5b505afa158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2591906123df565b15610a695760405162461bcd60e51b8152602060048201526014602482015273141bdbdb081dda5d1a191c985dc81c185d5cd95960621b60448201526064016104b3565b6000829050806001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa757600080fd5b505afa158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf91906122f0565b6001600160a01b03166381c17a156040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1757600080fd5b505afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f91906123df565b15610b975760405162461bcd60e51b8152602060048201526018602482015277506f6f6c206973206c617465206f6e207061796d656e747360401b60448201526064016104b3565b610ba18688611800565b60008981526101c860205260409020556101c354610c4990610bcb906001600160a01b0316611813565b6040516331a9108f60e11b8152600481018b90526001600160a01b03881690636352211e9060240160206040518083038186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4391906122f0565b8961181e565b604051878152889033907f999239c1f24bf85f910f36990b41859efd8ac66cded6e95ba0aef922b9cc57189060200160405180910390a35050505050505050565b600082815260656020526040902060010154610ca58161185a565b610caf8383611864565b505050565b6001600160a01b0381163314610d245760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104b3565b6105ef82826118ea565b6101c3546000908190610d49906001600160a01b03166116f2565b60405163463d31d760e11b8152600481018590529091506000906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b158015610d8f57600080fd5b505afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190612463565b60008581526101c8602090815260408083206001015484516001600160a01b031684526101c99092528220549293509091610e0191611951565b90506000610e26610e1061195d565b60008881526101c860205260409020549061196b565b9050610e5a610e3361195d565b610e5483610e4e86610e488960400151611977565b9061196b565b90611951565b90611996565b9695505050505050565b610e7c6000805160206129338339815191523361120d565b610e985760405162461bcd60e51b81526004016104b3906125b5565b610ea06119a2565b565b600054610100900460ff1615808015610ec25750600054600160ff909116105b80610edc5750303b158015610edc575060005460ff166001145b610ef85760405162461bcd60e51b81526004016104b390612628565b6000805460ff191660011790558015610f1b576000805461ff0019166101001790555b610f2361163c565b801561076e576000805461ff0019169055604051600181526000805160206129138339815191529060200160405180910390a150565b6101c354610f6f906001600160a01b03166119ee565b6001600160a01b0316336001600160a01b031614610fc15760405162461bcd60e51b815260206004820152600f60248201526e496e76616c69642073656e6465722160881b60448201526064016104b3565b6101c354610fd7906001600160a01b03166116f2565b6001600160a01b031663b5ada6d8836040518263ffffffff1660e01b8152600401611002919061256e565b60206040518083038186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105291906123df565b61106e5760405162461bcd60e51b81526004016104b390612601565b60008181526101c860205260409020600101541561108a575050565b6101c3546000906110a3906001600160a01b03166116f2565b60405163463d31d760e11b8152600481018490529091506000906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190612463565b905080600001516001600160a01b0316846001600160a01b03161461119e5760405162461bcd60e51b815260206004820152602d60248201527f506f6f6c41646472657373206d75737420657175616c20506f6f6c546f6b656e60448201526c20706f6f6c206164647265737360981b60648201526084016104b3565b516001600160a01b031660009081526101c960209081526040808320549483526101c89091529020600101919091555050565b6111e96000805160206129338339815191523361120d565b6112055760405162461bcd60e51b81526004016104b3906125b5565b610ea0611a70565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61124061134e565b61125c5760405162461bcd60e51b81526004016104b3906126c1565b6101c48190556101c35460009061127b906001600160a01b0316611813565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb91906124e7565b90506113086064610e4883610e5461130161195d565b879061196b565b6101c781905560408051848152602081019290925233917fa75d65370da375e8498bef76d6c105c80386c2d14e939f1c680da7f9a411c609910160405180910390a25050565b60006113686000805160206128f38339815191523361120d565b905090565b600054610100900460ff161580801561138d5750600054600160ff909116105b806113a75750303b1580156113a7575060005460ff166001145b6113c35760405162461bcd60e51b81526004016104b390612628565b6000805460ff1916600117905580156113e6576000805461ff0019166101001790555b6001600160a01b0383161580159061140657506001600160a01b03821615155b6114655760405162461bcd60e51b815260206004820152602a60248201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6044820152697420626520656d70747960b01b60648201526084016104b3565b61146e8361045d565b6101c380546001600160a01b0319166001600160a01b0384161790558015610caf576000805461ff0019169055604051600181526000805160206129138339815191529060200160405180910390a1505050565b6114ca61134e565b6114e65760405162461bcd60e51b81526004016104b3906126c1565b6101c3546114fc906001600160a01b0316611aad565b6101c380546001600160a01b0319166001600160a01b0392909216918217905560405133917f8d003bc2e3965bd9d92389a8ae0ef8c601fa211ba9378150dde7dc3cf38c3a369161154d919061256e565b60405180910390a2565b6000828152606560205260409020600101546115728161185a565b610caf83836118ea565b806115c95760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e73496473206c656e677468206d757374206e6f742062652030000060448201526064016104b3565b60005b81811015610caf576116038383838181106115f757634e487b7160e01b600052603260045260246000fd5b90506020020135610771565b8061160d816128ac565b9150506115cc565b600054610100900460ff16610ea05760405162461bcd60e51b81526004016104b390612676565b600054610100900460ff166116635760405162461bcd60e51b81526004016104b390612676565b6097805460ff19169055565b600054610100900460ff166116965760405162461bcd60e51b81526004016104b390612676565b600160c955565b6105ef8282611864565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000610457826119ee565b6101c6546101c55461170e82611977565b10611717575050565b33600061172384611ac5565b6001600160a01b03831660008181526101c960209081526040808320815163dd0ec24160e01b81529151959650879590949263dd0ec2419260048082019391829003018186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae91906124e7565b9050806117be5750505050505050565b6117e76117df6117cd83611977565b610e546117d861195d565b889061196b565b835490611800565b82556117f38688611800565b6101c65550505050505050565b600061180c828461270c565b9392505050565b600061045782611d35565b610caf8383836040518060400160405280601881526020017704661696c656420746f207472616e736665722045524332360441b815250611d4d565b61076e8133611e52565b61186e828261120d565b6105ef5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118a63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118f4828261120d565b156105ef5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061180c828461284e565b60006113686012600a612787565b600061180c828461282f565b6000610457611984611eab565b610e5461198f61195d565b859061196b565b600061180c8284612724565b6119aa611eb9565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516119e4919061256e565b60405180910390a1565b60006001600160a01b03821663b93f9b0a600c5b6040518263ffffffff1660e01b8152600401611a2091815260200190565b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045791906122f0565b611a78611f02565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119d73390565b60006001600160a01b03821663b93f9b0a600b611a02565b6101c3546000908190611ae0906001600160a01b0316611813565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1857600080fd5b505afa158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5091906124e7565b90506000611b5d84611977565b90506000611b6d6101c654611977565b90506000611b7a82611f48565b90506000611ba1611b9c611b8d866120c1565b611b96866120c1565b90611800565b611977565b90506101c554811115611bb457506101c5545b6000611bc383610e4e84611f48565b90506000611bd36101c554611f48565b905060008111611c395760405162461bcd60e51b815260206004820152602b60248201527f6d6178496e746572657374446f6c6c617273456c696769626c65206d7573742060448201526a6e6f74206265207a65726f60a81b60648201526084016104b3565b6000611c69611c4661195d565b610e548a610e486064610e5488610e546101c7548c61196b90919063ffffffff16565b90506000611ca7611c7861195d565b610e548b610e486064610e5489610e546101c754610e48611ca2611c9a61195d565b60019061196b565b611f48565b9050611cb3818661196b565b8210611d275760405162461bcd60e51b815260206004820152603d60248201527f6e657747726f7373526577617264732063616e6e6f742062652067726561746560448201527f72207468656e20746865206d6178206766692070657220646f6c6c617200000060648201526084016104b3565b509998505050505050505050565b60006001600160a01b03821663b93f9b0a6012611a02565b6001600160a01b038316611da35760405162461bcd60e51b815260206004820152601a60248201527f43616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016104b3565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490526000919086169063a9059cbb90604401602060405180830381600087803b158015611df157600080fd5b505af1158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2991906123df565b90508181611e4a5760405162461bcd60e51b81526004016104b39190612582565b505050505050565b611e5c828261120d565b6105ef57611e69816120e0565b611e748360206120f2565b604051602001611e859291906124ff565b60408051601f198184030181529082905262461bcd60e51b82526104b391600401612582565b60006113686006600a612787565b60975460ff16610ea05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104b3565b60975460ff1615610ea05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104b3565b600081611f5757506000919050565b816001600160801b8210611f705760809190911c9060401b5b600160401b8210611f865760409190911c9060201b5b6401000000008210611f9d5760209190911c9060101b5b620100008210611fb25760109190911c9060081b5b6101008210611fc65760089190911c9060041b5b60108210611fd95760049190911c9060021b5b60088210611fe55760011b5b6001611ff18286612724565b611ffb908361270c565b901c9050600161200b8286612724565b612015908361270c565b901c905060016120258286612724565b61202f908361270c565b901c9050600161203f8286612724565b612049908361270c565b901c905060016120598286612724565b612063908361270c565b901c905060016120738286612724565b61207d908361270c565b901c9050600161208d8286612724565b612097908361270c565b901c905060006120a78286612724565b90508082106120b657806120b8565b815b95945050505050565b60006104576120d96120d1611eab565b610e5461195d565b8390611996565b60606104576001600160a01b03831660145b6060600061210183600261282f565b61210c90600261270c565b67ffffffffffffffff81111561213257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561215c576020820181803683370190505b509050600360fc1b8160008151811061218557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106121c257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006121e684600261282f565b6121f190600161270c565b90505b6001811115612285576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061223357634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061225757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361227e81612895565b90506121f4565b50831561180c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104b3565b6000602082840312156122e5578081fd5b813561180c816128dd565b600060208284031215612301578081fd5b815161180c816128dd565b6000806040838503121561231e578081fd5b8235612329816128dd565b91506020830135612339816128dd565b809150509250929050565b60008060408385031215612356578182fd5b8235612361816128dd565b946020939093013593505050565b60008060208385031215612381578182fd5b823567ffffffffffffffff80821115612398578384fd5b818501915085601f8301126123ab578384fd5b8135818111156123b9578485fd5b8660208260051b85010111156123cd578485fd5b60209290920196919550909350505050565b6000602082840312156123f0578081fd5b8151801515811461180c578182fd5b600060208284031215612410578081fd5b5035919050565b60008060408385031215612429578182fd5b823591506020830135612339816128dd565b60006020828403121561244c578081fd5b81356001600160e01b03198116811461180c578182fd5b600060a08284031215612474578081fd5b60405160a0810181811067ffffffffffffffff821117156124a357634e487b7160e01b83526041600452602483fd5b60405282516124b1816128dd565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156124f8578081fd5b5051919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612531816017850160208801612865565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612562816028840160208801612865565b01602801949350505050565b6001600160a01b0391909116815260200190565b60208152600082518060208401526125a1816040850160208701612865565b601f01601f19169190910160400192915050565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252600d908201526c496e76616c696420706f6f6c2160981b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6000821982111561271f5761271f6128c7565b500190565b60008261273f57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561277f578160001904821115612765576127656128c7565b8085161561277257918102915b93841c9390800290612749565b509250929050565b600061180c838360008261279d57506001610457565b816127aa57506000610457565b81600181146127c057600281146127ca576127e6565b6001915050610457565b60ff8411156127db576127db6128c7565b50506001821b610457565b5060208310610133831016604e8410600b8410161715612809575081810a610457565b6128138383612744565b8060001904821115612827576128276128c7565b029392505050565b6000816000190483118215151615612849576128496128c7565b500290565b600082821015612860576128606128c7565b500390565b60005b83811015612880578181015183820152602001612868565b8381111561288f576000848401525b50505050565b6000816128a4576128a46128c7565b506000190190565b60006000198214156128c0576128c06128c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461076e57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220490fb2a68ace6574d8f6f2224668cfea43126d23e8b4c1fba3766f6fc780710564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b05760003560e01c80636efbe643116100ef578063b6db75a011610092578063b6db75a0146103a9578063b6f8fd40146103b1578063ccf5a971146103c4578063d30a0911146103ce578063d547741f146103d6578063e58378bb146103e9578063e5b79106146103fe578063e63ab1e91461041157600080fd5b80636efbe6431461031457806379502c55146103275780638456cb591461034857806387f5769e1461035057806391d148541461035a578063927356751461036d578063a217fddf14610380578063a4063dbc1461038857600080fd5b80632e1a7d4d116101575780632e1a7d4d146102705780632f2ff15d1461028357806336568abe14610296578063369dfa84146102a95780633f4ba83a146102bc5780634f64b2be146102c4578063526d81f6146103015780635c975abb1461030957600080fd5b806301ffc9a7146101b5578063097616a3146101dd5780630c9dbe94146101f25780630e15561a1461020a578063242a728614610214578063248a9ca3146102275780632879e4de1461024a57806328fc33c71461025d575b600080fd5b6101c86101c336600461243b565b610426565b60405190151581526020015b60405180910390f35b6101f06101eb3660046122d4565b61045d565b005b6101fc6101c75481565b6040519081526020016101d4565b6101fc6101c45481565b6101f06102223660046123ff565b6105f3565b6101fc6102353660046123ff565b60009081526065602052604090206001015490565b6101f06102583660046123ff565b610656565b6101f061026b3660046123ff565b6106b2565b6101f061027e3660046123ff565b610771565b6101f0610291366004612417565b610c8a565b6101f06102a4366004612417565b610cb4565b6101fc6102b73660046123ff565b610d2e565b6101f0610e64565b6102ec6102d23660046123ff565b6101c8602052600090815260409020805460019091015482565b604080519283526020830191909152016101d4565b6101f0610ea2565b60975460ff166101c8565b6101f0610322366004612344565b610f59565b6101c35461033b906001600160a01b031681565b6040516101d4919061256e565b6101f06111d1565b6101fc6101c65481565b6101c8610368366004612417565b61120d565b6101f061037b3660046123ff565b611238565b6101fc600081565b6101fc6103963660046122d4565b6101c96020526000908152604090205481565b6101c861134e565b6101f06103bf36600461230c565b61136d565b6101fc6101c55481565b6101f06114c2565b6101f06103e4366004612417565b611557565b6101fc6000805160206128f383398151915281565b6101f061040c36600461236f565b61157c565b6101fc60008051602061293383398151915281565b60006001600160e01b03198216637965db0b60e01b148061045757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff161580801561047d5750600054600160ff909116105b806104975750303b158015610497575060005460ff166001145b6104bc5760405162461bcd60e51b81526004016104b390612628565b60405180910390fd5b6000805460ff1916600117905580156104df576000805461ff0019166101001790555b6001600160a01b0382166105355760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f206164647265737360448201526064016104b3565b61053d611615565b61054561163c565b61054d61166f565b6105656000805160206128f38339815191528361169d565b61057d6000805160206129338339815191528361169d565b6105a36000805160206129338339815191526000805160206128f38339815191526116a7565b6105bb6000805160206128f3833981519152806116a7565b80156105ef576000805461ff0019169055604051600181526000805160206129138339815191529060200160405180910390a15b5050565b6105fb61134e565b6106175760405162461bcd60e51b81526004016104b3906126c1565b6101c581905560405181815233907fbd23f227ee01d5b74d28337b4aa192bdb10824b0f2ad21e725a2f08af91ec81b906020015b60405180910390a250565b61065e61134e565b61067a5760405162461bcd60e51b81526004016104b3906126c1565b6101c681905560405181815233907feabaa681e9990f0da888d0feb7ec727809a7e832013b120a9a248ba6b16d5f449060200161064b565b6101c3546106c8906001600160a01b03166116f2565b6001600160a01b031663b5ada6d8336040518263ffffffff1660e01b81526004016106f3919061256e565b60206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074391906123df565b61075f5760405162461bcd60e51b81526004016104b390612601565b801561076e5761076e816116fd565b50565b600061077c82610d2e565b60008381526101c860205260408120546101c354929350916107a6906001600160a01b03166116f2565b60405163463d31d760e11b8152600481018690529091506000906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190612463565b80516101c35491925090610840906001600160a01b03166116f2565b6001600160a01b031663b5ada6d8826040518263ffffffff1660e01b815260040161086b919061256e565b60206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb91906123df565b6108d75760405162461bcd60e51b81526004016104b390612601565b6040516331a9108f60e11b8152600481018790526001600160a01b03841690636352211e9060240160206040518083038186803b15801561091757600080fd5b505afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f91906122f0565b6001600160a01b0316336001600160a01b0316146109af5760405162461bcd60e51b815260206004820152601a60248201527f4d757374206265206f776e6572206f6620506f6f6c546f6b656e00000000000060448201526064016104b3565b6000819050806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ed57600080fd5b505afa158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2591906123df565b15610a695760405162461bcd60e51b8152602060048201526014602482015273141bdbdb081dda5d1a191c985dc81c185d5cd95960621b60448201526064016104b3565b6000829050806001600160a01b03166347195e136040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa757600080fd5b505afa158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf91906122f0565b6001600160a01b03166381c17a156040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1757600080fd5b505afa158015610b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4f91906123df565b15610b975760405162461bcd60e51b8152602060048201526018602482015277506f6f6c206973206c617465206f6e207061796d656e747360401b60448201526064016104b3565b610ba18688611800565b60008981526101c860205260409020556101c354610c4990610bcb906001600160a01b0316611813565b6040516331a9108f60e11b8152600481018b90526001600160a01b03881690636352211e9060240160206040518083038186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4391906122f0565b8961181e565b604051878152889033907f999239c1f24bf85f910f36990b41859efd8ac66cded6e95ba0aef922b9cc57189060200160405180910390a35050505050505050565b600082815260656020526040902060010154610ca58161185a565b610caf8383611864565b505050565b6001600160a01b0381163314610d245760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104b3565b6105ef82826118ea565b6101c3546000908190610d49906001600160a01b03166116f2565b60405163463d31d760e11b8152600481018590529091506000906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b158015610d8f57600080fd5b505afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190612463565b60008581526101c8602090815260408083206001015484516001600160a01b031684526101c99092528220549293509091610e0191611951565b90506000610e26610e1061195d565b60008881526101c860205260409020549061196b565b9050610e5a610e3361195d565b610e5483610e4e86610e488960400151611977565b9061196b565b90611951565b90611996565b9695505050505050565b610e7c6000805160206129338339815191523361120d565b610e985760405162461bcd60e51b81526004016104b3906125b5565b610ea06119a2565b565b600054610100900460ff1615808015610ec25750600054600160ff909116105b80610edc5750303b158015610edc575060005460ff166001145b610ef85760405162461bcd60e51b81526004016104b390612628565b6000805460ff191660011790558015610f1b576000805461ff0019166101001790555b610f2361163c565b801561076e576000805461ff0019169055604051600181526000805160206129138339815191529060200160405180910390a150565b6101c354610f6f906001600160a01b03166119ee565b6001600160a01b0316336001600160a01b031614610fc15760405162461bcd60e51b815260206004820152600f60248201526e496e76616c69642073656e6465722160881b60448201526064016104b3565b6101c354610fd7906001600160a01b03166116f2565b6001600160a01b031663b5ada6d8836040518263ffffffff1660e01b8152600401611002919061256e565b60206040518083038186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105291906123df565b61106e5760405162461bcd60e51b81526004016104b390612601565b60008181526101c860205260409020600101541561108a575050565b6101c3546000906110a3906001600160a01b03166116f2565b60405163463d31d760e11b8152600481018490529091506000906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190612463565b905080600001516001600160a01b0316846001600160a01b03161461119e5760405162461bcd60e51b815260206004820152602d60248201527f506f6f6c41646472657373206d75737420657175616c20506f6f6c546f6b656e60448201526c20706f6f6c206164647265737360981b60648201526084016104b3565b516001600160a01b031660009081526101c960209081526040808320549483526101c89091529020600101919091555050565b6111e96000805160206129338339815191523361120d565b6112055760405162461bcd60e51b81526004016104b3906125b5565b610ea0611a70565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61124061134e565b61125c5760405162461bcd60e51b81526004016104b3906126c1565b6101c48190556101c35460009061127b906001600160a01b0316611813565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb91906124e7565b90506113086064610e4883610e5461130161195d565b879061196b565b6101c781905560408051848152602081019290925233917fa75d65370da375e8498bef76d6c105c80386c2d14e939f1c680da7f9a411c609910160405180910390a25050565b60006113686000805160206128f38339815191523361120d565b905090565b600054610100900460ff161580801561138d5750600054600160ff909116105b806113a75750303b1580156113a7575060005460ff166001145b6113c35760405162461bcd60e51b81526004016104b390612628565b6000805460ff1916600117905580156113e6576000805461ff0019166101001790555b6001600160a01b0383161580159061140657506001600160a01b03821615155b6114655760405162461bcd60e51b815260206004820152602a60248201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6044820152697420626520656d70747960b01b60648201526084016104b3565b61146e8361045d565b6101c380546001600160a01b0319166001600160a01b0384161790558015610caf576000805461ff0019169055604051600181526000805160206129138339815191529060200160405180910390a1505050565b6114ca61134e565b6114e65760405162461bcd60e51b81526004016104b3906126c1565b6101c3546114fc906001600160a01b0316611aad565b6101c380546001600160a01b0319166001600160a01b0392909216918217905560405133917f8d003bc2e3965bd9d92389a8ae0ef8c601fa211ba9378150dde7dc3cf38c3a369161154d919061256e565b60405180910390a2565b6000828152606560205260409020600101546115728161185a565b610caf83836118ea565b806115c95760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e73496473206c656e677468206d757374206e6f742062652030000060448201526064016104b3565b60005b81811015610caf576116038383838181106115f757634e487b7160e01b600052603260045260246000fd5b90506020020135610771565b8061160d816128ac565b9150506115cc565b600054610100900460ff16610ea05760405162461bcd60e51b81526004016104b390612676565b600054610100900460ff166116635760405162461bcd60e51b81526004016104b390612676565b6097805460ff19169055565b600054610100900460ff166116965760405162461bcd60e51b81526004016104b390612676565b600160c955565b6105ef8282611864565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000610457826119ee565b6101c6546101c55461170e82611977565b10611717575050565b33600061172384611ac5565b6001600160a01b03831660008181526101c960209081526040808320815163dd0ec24160e01b81529151959650879590949263dd0ec2419260048082019391829003018186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae91906124e7565b9050806117be5750505050505050565b6117e76117df6117cd83611977565b610e546117d861195d565b889061196b565b835490611800565b82556117f38688611800565b6101c65550505050505050565b600061180c828461270c565b9392505050565b600061045782611d35565b610caf8383836040518060400160405280601881526020017704661696c656420746f207472616e736665722045524332360441b815250611d4d565b61076e8133611e52565b61186e828261120d565b6105ef5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118a63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118f4828261120d565b156105ef5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061180c828461284e565b60006113686012600a612787565b600061180c828461282f565b6000610457611984611eab565b610e5461198f61195d565b859061196b565b600061180c8284612724565b6119aa611eb9565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516119e4919061256e565b60405180910390a1565b60006001600160a01b03821663b93f9b0a600c5b6040518263ffffffff1660e01b8152600401611a2091815260200190565b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045791906122f0565b611a78611f02565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119d73390565b60006001600160a01b03821663b93f9b0a600b611a02565b6101c3546000908190611ae0906001600160a01b0316611813565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1857600080fd5b505afa158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5091906124e7565b90506000611b5d84611977565b90506000611b6d6101c654611977565b90506000611b7a82611f48565b90506000611ba1611b9c611b8d866120c1565b611b96866120c1565b90611800565b611977565b90506101c554811115611bb457506101c5545b6000611bc383610e4e84611f48565b90506000611bd36101c554611f48565b905060008111611c395760405162461bcd60e51b815260206004820152602b60248201527f6d6178496e746572657374446f6c6c617273456c696769626c65206d7573742060448201526a6e6f74206265207a65726f60a81b60648201526084016104b3565b6000611c69611c4661195d565b610e548a610e486064610e5488610e546101c7548c61196b90919063ffffffff16565b90506000611ca7611c7861195d565b610e548b610e486064610e5489610e546101c754610e48611ca2611c9a61195d565b60019061196b565b611f48565b9050611cb3818661196b565b8210611d275760405162461bcd60e51b815260206004820152603d60248201527f6e657747726f7373526577617264732063616e6e6f742062652067726561746560448201527f72207468656e20746865206d6178206766692070657220646f6c6c617200000060648201526084016104b3565b509998505050505050505050565b60006001600160a01b03821663b93f9b0a6012611a02565b6001600160a01b038316611da35760405162461bcd60e51b815260206004820152601a60248201527f43616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016104b3565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490526000919086169063a9059cbb90604401602060405180830381600087803b158015611df157600080fd5b505af1158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2991906123df565b90508181611e4a5760405162461bcd60e51b81526004016104b39190612582565b505050505050565b611e5c828261120d565b6105ef57611e69816120e0565b611e748360206120f2565b604051602001611e859291906124ff565b60408051601f198184030181529082905262461bcd60e51b82526104b391600401612582565b60006113686006600a612787565b60975460ff16610ea05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104b3565b60975460ff1615610ea05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104b3565b600081611f5757506000919050565b816001600160801b8210611f705760809190911c9060401b5b600160401b8210611f865760409190911c9060201b5b6401000000008210611f9d5760209190911c9060101b5b620100008210611fb25760109190911c9060081b5b6101008210611fc65760089190911c9060041b5b60108210611fd95760049190911c9060021b5b60088210611fe55760011b5b6001611ff18286612724565b611ffb908361270c565b901c9050600161200b8286612724565b612015908361270c565b901c905060016120258286612724565b61202f908361270c565b901c9050600161203f8286612724565b612049908361270c565b901c905060016120598286612724565b612063908361270c565b901c905060016120738286612724565b61207d908361270c565b901c9050600161208d8286612724565b612097908361270c565b901c905060006120a78286612724565b90508082106120b657806120b8565b815b95945050505050565b60006104576120d96120d1611eab565b610e5461195d565b8390611996565b60606104576001600160a01b03831660145b6060600061210183600261282f565b61210c90600261270c565b67ffffffffffffffff81111561213257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561215c576020820181803683370190505b509050600360fc1b8160008151811061218557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106121c257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006121e684600261282f565b6121f190600161270c565b90505b6001811115612285576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061223357634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061225757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361227e81612895565b90506121f4565b50831561180c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104b3565b6000602082840312156122e5578081fd5b813561180c816128dd565b600060208284031215612301578081fd5b815161180c816128dd565b6000806040838503121561231e578081fd5b8235612329816128dd565b91506020830135612339816128dd565b809150509250929050565b60008060408385031215612356578182fd5b8235612361816128dd565b946020939093013593505050565b60008060208385031215612381578182fd5b823567ffffffffffffffff80821115612398578384fd5b818501915085601f8301126123ab578384fd5b8135818111156123b9578485fd5b8660208260051b85010111156123cd578485fd5b60209290920196919550909350505050565b6000602082840312156123f0578081fd5b8151801515811461180c578182fd5b600060208284031215612410578081fd5b5035919050565b60008060408385031215612429578182fd5b823591506020830135612339816128dd565b60006020828403121561244c578081fd5b81356001600160e01b03198116811461180c578182fd5b600060a08284031215612474578081fd5b60405160a0810181811067ffffffffffffffff821117156124a357634e487b7160e01b83526041600452602483fd5b60405282516124b1816128dd565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156124f8578081fd5b5051919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612531816017850160208801612865565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612562816028840160208801612865565b01602801949350505050565b6001600160a01b0391909116815260200190565b60208152600082518060208401526125a1816040850160208701612865565b601f01601f19169190910160400192915050565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252600d908201526c496e76616c696420706f6f6c2160981b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6000821982111561271f5761271f6128c7565b500190565b60008261273f57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561277f578160001904821115612765576127656128c7565b8085161561277257918102915b93841c9390800290612749565b509250929050565b600061180c838360008261279d57506001610457565b816127aa57506000610457565b81600181146127c057600281146127ca576127e6565b6001915050610457565b60ff8411156127db576127db6128c7565b50506001821b610457565b5060208310610133831016604e8410600b8410161715612809575081810a610457565b6128138383612744565b8060001904821115612827576128276128c7565b029392505050565b6000816000190483118215151615612849576128496128c7565b500290565b600082821015612860576128606128c7565b500390565b60005b83811015612880578181015183820152602001612868565b8381111561288f576000848401525b50505050565b6000816128a4576128a46128c7565b506000190190565b60006000198214156128c0576128c06128c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461076e57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220490fb2a68ace6574d8f6f2224668cfea43126d23e8b4c1fba3766f6fc780710564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allocateRewards(uint256)": {
        "params": {
          "_interestPaymentAmount": "The amount of total dollars the interest payment, expects 10^6 value"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "poolTokenClaimableRewards(uint256)": {
        "params": {
          "tokenId": "Pool token id"
        },
        "returns": {
          "_0": "The amount of GFI claimable"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setMaxInterestDollarsEligible(uint256)": {
        "params": {
          "_maxInterestDollarsEligible": "The amount of interest dollars eligible for GFI rewards, expects 10^18 value"
        }
      },
      "setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)": {
        "params": {
          "tokenId": "Pool token id"
        }
      },
      "setTotalInterestReceived(uint256)": {
        "params": {
          "_totalInterestReceived": "The amount of interest the protocol has received to date, expects 10^6 value"
        }
      },
      "setTotalRewards(uint256)": {
        "params": {
          "_totalRewards": "The amount of GFI rewards available, expects 10^18 value"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256)": {
        "params": {
          "tokenId": "Pool token id"
        }
      },
      "withdrawMultiple(uint256[])": {
        "params": {
          "tokenIds": "Array of pool token id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocateRewards(uint256)": {
        "notice": "Calculates the accRewardsPerPrincipalDollar for a given pool, when a interest payment is received by the protocol"
      },
      "poolTokenClaimableRewards(uint256)": {
        "notice": "Calculate the gross available gfi rewards for a PoolToken"
      },
      "setMaxInterestDollarsEligible(uint256)": {
        "notice": "Set the max dollars across the entire protocol that are eligible for GFI rewards"
      },
      "setPoolTokenAccRewardsPerPrincipalDollarAtMint(address,uint256)": {
        "notice": "When a pool token is minted for multiple drawdowns, set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price"
      },
      "setTotalInterestReceived(uint256)": {
        "notice": "Set the total interest received to date. This should only be called once on contract deploy."
      },
      "setTotalRewards(uint256)": {
        "notice": "Set the total gfi rewards and the % of total GFI"
      },
      "withdraw(uint256)": {
        "notice": "PoolToken request to withdraw all allocated rewards"
      },
      "withdrawMultiple(uint256[])": {
        "notice": "PoolToken request to withdraw multiple PoolTokens allocated rewards"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 588,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 591,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4964,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5544,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 771,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 876,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 891,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 949,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15949,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15953,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15957,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15961,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 32545,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "config",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(DobermanConfig)20001"
      },
      {
        "astId": 32562,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "totalRewards",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 32564,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "maxInterestDollarsEligible",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      },
      {
        "astId": 32566,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "totalInterestReceived",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 32568,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "totalRewardPercentOfTotalGFI",
        "offset": 0,
        "slot": "455",
        "type": "t_uint256"
      },
      {
        "astId": 32573,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "tokens",
        "offset": 0,
        "slot": "456",
        "type": "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)32560_storage)"
      },
      {
        "astId": 32578,
        "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
        "label": "pools",
        "offset": 0,
        "slot": "457",
        "type": "t_mapping(t_address,t_struct(BackerRewardsInfo)32555_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(DobermanConfig)20001": {
        "encoding": "inplace",
        "label": "contract DobermanConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(BackerRewardsInfo)32555_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BackerRewards.BackerRewardsInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BackerRewardsInfo)32555_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)32560_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BackerRewards.BackerRewardsTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BackerRewardsTokenInfo)32560_storage"
      },
      "t_struct(BackerRewardsInfo)32555_storage": {
        "encoding": "inplace",
        "label": "struct BackerRewards.BackerRewardsInfo",
        "members": [
          {
            "astId": 32554,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accRewardsPerPrincipalDollar",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(BackerRewardsTokenInfo)32560_storage": {
        "encoding": "inplace",
        "label": "struct BackerRewards.BackerRewardsTokenInfo",
        "members": [
          {
            "astId": 32557,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "rewardsClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 32559,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "accRewardsPerPrincipalDollarAtMint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/rewards/BackerRewards.sol:BackerRewards",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}